import bitmex
import pyotp
import ccxt
from datetime import datetime
import warnings
warnings.simplefilter("ignore")
OTPString = "YOUROPTSTRING"
ExitAdress = 'YOUR WALLET DESTINATION'
api_key="YOUR API KEY"
api_secret="YOUR API SECRET"
client = bitmex.bitmex(test=False, api_key=api_key,  api_secret=api_secret)
exchange = ccxt.bitmex({
                  'apiKey': 'YOUR API KEY',
                  'secret': 'YOUR API SECRET',
                  'enableRateLimit': True,
                  })  
Today = datetime.today() 
def PayRoll (Date, AmountRoll, ExitAdress):
        AmountRoll = str (float(AmounRoll)/LastPrice)   # CONVERT USD TO BTC
        Satoshi = float(AmountRoll)*100000000           # CONVERT BTC TO SATOSHI
        SatoshiWith = str('{:.0f}'.format(Satoshi))
        totp = pyotp.TOTP(OTPString)
        Bitmexotp = (totp.now())  
        otpStr = str(Bitmexotp) 
        PayrollDate = Date
        if Today.strftime("%d") == PayrollDate:   
          code = 'BTC'
          amount = AmountRoll 
          address = ExitAdress
          tag = None
          params = {
                  'otpToken': otpStr,
                  }
          exchange.withdraw(code, amount, address, tag, params)
        else:
            print ('Not yet pay date')


def PayExcess (NotWithdrawal, Excess, ExitAdress):
    Excess = str (float(Excess)/LastPrice)                  # CONVERT USD TO BTC
    NotWithdrawal = str (float(NotWithdrawal)/LastPrice)    # CONVERT USD TO BTC
    Satoshi = float(Excess)*100000000                       # CONVERT BTC TO SATOSHI
    SatoshiWith = str('{:.0f}'.format(Satoshi))
    SatoshiNo = float(NotWithdrawal)*100000000
    SatoshiNoWith = str('{:.0f}'.format(Satoshi))           # CONVERT BTC TO SATOSHI
    totp = pyotp.TOTP(OTPString)
    Bitmexotp = (totp.now())  
    otpStr = str(Bitmexotp) 
    GetWalletBalance = ((client.User.User_getMargin().result())[0])['walletBalance']
    if float(GetWalletBalance) > float(NotWithdrawal):
       code = 'BTC'
       amount = Excess
       address = ExitAdress
       tag = None
       params = {
                 'otpToken': otpStr,
                 }
       exchange.withdraw(code, amount, address, tag, params)
    else :
          print ( 'Not excedent amount to withdrawn')     

PayRoll ('30', '50', ExitAdress)   #INPUT DATE OF PAYMENT (USD), QUANTITY TO PAY, EXTERNAL WITHDRAWAL ADDRESS

#PayExcess ('1000','50', ExitAdress) #INPUT AMOUNT YOU DON'T WANT WITHDRAWN(USD), AMOUNT YOU WANT WITHDRAWN(USD), EXTERNAL WITHDRAWAL ADDRESS

